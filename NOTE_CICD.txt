1. Setup CirleCi
1.1. Create .circleci/config.yml. In file:
1.2. Add jobs

        version: 2
        jobs:
          build:
            steps:
          test:
            steps:
          docker-image-create-and-push:
            steps:
          deploy:
            steps:

1.3. Add workflows

        workflows:
          version: 2
          build_test_deploy:
            jobs:
              - build
              - test:
                  requires:
                    - build
              - docker-image-create-and-push:
                  requires:
                    - test
              - deploy:
                  requires:
                    - docker-image-create-and-push

2. Build

        build:
                                ### use docker with jdk image to build my app.
            docker:
              - image: circleci/openjdk:11-jdk
                                ### execute commands in below folder
            working_directory: ~/fake-user-app
            steps:
              - checkout
              - run:
                  name: Create a Directory
                                ### this step creates working_directory
                                ### -p means that if directory already exists then do not give error
                  command: mkdir -p ~/fake-user-app
                                ### reuse libraries that were prior downloaded
              - restore_cache:
                  keys:
                    - fake-user-app-dependencies-{{ checksum "pom.xml" }}
              - run:
                  name: Build (Create JAR File)
                  command: mvn clean package -DskipTests
                                ### preserver downloaded libraries for future builds
              - save_cache:
                  paths:
                    - ~/.m2
                  key: fake-user-app-dependencies-{{ checksum "pom.xml" }}
                                ### save project working files in one location, so it can be reused by other servers (in case of multiple servers)
              - persist_to_workspace:
                  root: ~/fake-user-app
                  paths:
                    - .

3. Test

      test:
                        ### use virtual machine with docker, maven, aws
                        ### this is alternative to defining docker in build steps
                        ###    docker:
                        ###              - image: circleci/openjdk:11-jdk
        machine: true
                        ### reuse workspace defined in build step
        working_directory: ~/fake-usefr-app
        steps:
          - attach_workspace:
                        ### reuse workspace defined in build step
              at: ~/fake-user-app
                        ### create Postgres database to run the test
          - run:
              name: Docker Container That Runs Postgresql In It (Fake DB)
              command: docker run --name test-db -d -p 5432:5432 -e POSTGRES_DB=fake-user-app -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=Cydeo123. postgres:latest
                        ### run the test command in multiple lines
          - run:
              name: Run Integration Tests and Unit Tests
              command: |
                mvn test -Dskip.unit.tests=false -Dskip.integration.tests=false \
                -Dspring.datasource.url=jdbc:postgresql://localhost:5432/fake-user-app \
                -Dspring.datasource.username=postgres \
                -Dspring.datasource.password=Cydeo123.


4. Docker Image Create

4.1. Create ECR (Elastic Container Registry - instead of DockerHub)

    aws.com > search for ECR > Create a repository / Get started >
        Repository name: fake-user-app
        Create repository
    on ECR portal > select new ECR and click View push command > copy login command

    in step 4 copy instance id: 637423465023.dkr.ecr.us-east-2.amazonaws.com

4.2. Download AWS Security Credentials

    aws.com > ECR portal > top-left clikc on username > Security Credentials
    Access Keys section > Create access key > download access.csv file.

4.3. build image and deploy it

      docker-image-create-and-push:
        machine: true
        working_directory: ~/fake-user-app
        steps:
          - attach_workspace:
              at: ~/fake-user-app
          - run:
              name: Create Docker Image
              command: docker build -t $ECR_URL/fake-user-app:latest .
          - run:
              name: Login to Image Repo (AWS ECR)
                        ### paste login command from 4.1.
              command: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_URL
          - run:
              name: Push the image to ECR
              command: docker push $ECR_URL/fake-user-app:latest



5. Deploy

      deploy:
        machine: true
        steps:
          - run:
              name: Connect to EC2 Server and run the image
              command: |
                ssh -o "StrictHostKeyChecking=no" $SERVER_USERNAME@$SERVER_HOSTNAME <<'ENDSSH'
                /bin/bash ~/fake-user-app/deploy_image.sh
                ENDSSH




